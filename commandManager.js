// commandManager.js
const { SlashCommandBuilder, PermissionsBitField, REST, Routes } = require('discord.js');
const Logger = require('./logger');

class CommandManager {
    constructor(token, clientId, ownerId) {
        this.token = token;
        this.clientId = clientId;
        this.ownerId = ownerId;
        this.rest = new REST({ version: '10' }).setToken(this.token);
    }

    getCommands() {
        return [
            new SlashCommandBuilder()
                .setName('startpoll')
                .setDescription('üó≥Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

            new SlashCommandBuilder()
                .setName('toggle')
                .setDescription('üîÑ –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–æ—Å—ã')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

            new SlashCommandBuilder()
                .setName('pollstatus')
                .setDescription('üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–æ–≤')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

            new SlashCommandBuilder()
                .setName('clearcommands')
                .setDescription('üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),
            new SlashCommandBuilder()
                .setName('config')
                .setDescription('‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

            new SlashCommandBuilder()
                .setName('endpoll')
                .setDescription('üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

            new SlashCommandBuilder()
                .setName('testall')
                .setDescription('üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å –≤–æ –≤—Å–µ—Ö –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≥–∏–ª—å–¥–∏—è—Ö –Ω–∞ 1 –º–∏–Ω—É—Ç—É')
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

            new SlashCommandBuilder()
                .setName('setconfig')
                .setDescription('üß© –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞')
                .addStringOption(option =>
                    option.setName('setting')
                        .setDescription('–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å')
                        .setRequired(true)
                        .addChoices(
                            { name: '–ö–∞–Ω–∞–ª –æ–ø—Ä–æ—Å–æ–≤', value: 'channel' },
                            { name: '–†–æ–ª—å –ª–∏–¥–µ—Ä–∞', value: 'leader' },
                            { name: '–†–æ–ª—å –¥–ª—è –ø–∏–Ω–≥–∞', value: 'voter' },
                            { name: '–†–æ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤', value: 'curator' }
                        )
                )
                .addStringOption(option =>
                    option.setName('value')
                        .setDescription('ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Ä–æ–ª–∏')
                        .setRequired(true)
                )
                .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),
            new SlashCommandBuilder()
            .setName('setautotime')
            .setDescription('üïí –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –∞–≤—Ç–æ–æ–ø—Ä–æ—Å–æ–≤')
            .addStringOption(option =>
                option.setName('start')
                .setDescription('–ù–∞—á–∞–ª–æ (–Ω–∞–ø—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:05)')
                .setRequired(true))
            .addStringOption(option =>
                option.setName('end')
                .setDescription('–ö–æ–Ω–µ—Ü (–Ω–∞–ø—Ä: –ü—è—Ç–Ω–∏—Ü–∞ 23:55)')
                .setRequired(true))
            .setDefaultMemberPermissions(PermissionsBitField.Flags.Administrator),

        ];
    }

    async register(guildId = null) {
        const commands = this.getCommands().map(cmd => cmd.toJSON());
        const route = guildId
            ? Routes.applicationGuildCommands(this.clientId, guildId)
            : Routes.applicationCommands(this.clientId);

        Logger.info(`–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ${commands.length} –∫–æ–º–∞–Ω–¥ ${guildId ? `–¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${guildId}` : '–≥–ª–æ–±–∞–ª—å–Ω–æ'}...`);
        try {
            const registered = await this.rest.put(route, { body: commands });
            Logger.success(`–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ ${registered.length} –∫–æ–º–∞–Ω–¥.`);
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
        }
    }

    async clearAllCommands(interaction) {
        if (interaction.user.id !== this.ownerId) {
            await interaction.reply({ content: '‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
            return;
        }

        try {
            await interaction.deferReply({ ephemeral: true });
            await this.rest.put(Routes.applicationCommands(this.clientId), { body: [] });
            await interaction.editReply('‚úÖ –í—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.');
        } catch (error) {
            Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
            await interaction.editReply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥.');
        }
    }
}

module.exports = CommandManager;
