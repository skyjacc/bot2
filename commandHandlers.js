const Logger = require('../logger');
const SettingsManager = require('../settingsManager');
const { EmbedBuilder } = require('discord.js');
const cron = require('node-cron');
const scheduleManager = require('../scheduleManager');

module.exports = (pollManager, commandManager, client, scheduleManager) => ({
    async startpoll(interaction) {
        await interaction.deferReply({ ephemeral: true });
        const result = await pollManager.startPoll(interaction.guildId, true);
        await interaction.editReply(result.message);
    },

    async testall(interaction) {
        await interaction.deferReply({ ephemeral: true });

        const configs = SettingsManager.getAllConfigs();
        const guildIds = Object.keys(configs).filter(id => configs[id].enabled);
        const results = [];

        for (const guildId of guildIds) {
            const result = await pollManager.startPoll(guildId, true, 60);
            results.push(`‚Ä¢ ${guildId}: ${result.success ? 'üü¢ –£—Å–ø–µ—Ö' : 'üî¥ ' + result.message}`);
            await new Promise(res => setTimeout(res, 1000))
        }

        await interaction.editReply(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω:\n` + results.join('\n'));
    },
    async setautotime(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const startInput = interaction.options.getString('start');
    const endInput = interaction.options.getString('end');

    const parseTime = (input) => {
        const days = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1, '–≤—Ç–æ—Ä–Ω–∏–∫': 2, '—Å—Ä–µ–¥–∞': 3, '—á–µ—Ç–≤–µ—Ä–≥': 4,
        '–ø—è—Ç–Ω–∏—Ü–∞': 5, '—Å—É–±–±–æ—Ç–∞': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 0,
        'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4,
        'fri': 5, 'sat': 6, 'sun': 0
        };

        const [dayRaw, timeRaw] = input.trim().toLowerCase().split(/\s+/);
        const day = days[dayRaw];
        if (day === undefined || !/^\d{2}:\d{2}$/.test(timeRaw)) return null;

        const [hour, minute] = timeRaw.split(':').map(Number);
        return { minute, hour, day };
    };

    const start = parseTime(startInput);
    const end = parseTime(endInput);

    if (!start || !end) {
        await interaction.editReply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `/setautotime start:–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:05 end:–ü—è—Ç–Ω–∏—Ü–∞ 23:55`');
        return;
    }

    // –û–±–Ω–æ–≤–∏–º cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É
    const startCron = `${start.minute} ${start.hour} * * ${start.day}`;
    const endCron = `${end.minute} ${end.hour} * * ${end.day}`;
    scheduleManager.setCustomSchedule(startCron, endCron);
    scheduleManager.setGlobalAutoTime(startCron, endCron); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ


    await interaction.editReply(`‚úÖ –ê–≤—Ç–æ–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è: **${startInput}**, –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è: **${endInput}**`);
    },

    async setconfig(interaction) {
        await interaction.deferReply({ ephemeral: true });

        const guildId = interaction.guildId;
        const guild = interaction.guild;
        const setting = interaction.options.getString('setting');
        const value = interaction.options.getString('value');

        const config = SettingsManager.getConfig(guildId);
        if (!config) {
            await interaction.editReply('‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.');
            return;
        }

        if (!/^[0-9]{17,20}$/.test(value)) {
            await interaction.editReply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Ä–æ–ª–∏.');
            return;
        }

        let updated = {};
        let name = '';
        try {
            if (setting === 'channel') {
                const channel = guild.channels.cache.get(value) || await guild.channels.fetch(value).catch(() => null);
                if (!channel || !channel.isTextBased()) {
                    await interaction.editReply('‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º.');
                    return;
                }
                updated.channelId = value;
                name = channel.name;
            } else {
                const role = guild.roles.cache.get(value) || await guild.roles.fetch(value).catch(() => null);
                if (!role) {
                    await interaction.editReply('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ.');
                    return;
                }
                if (setting === 'leader') updated.leaderRoleId = value;
                if (setting === 'voter') updated.voterRoleId = value;
                if (setting === 'curator') updated.curatorRoleId = value;
                name = role.name;
            }

            SettingsManager.updateConfig(guildId, updated);

            await interaction.editReply(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ \`${setting}\` –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${name} (\`${value}\`)`);
            Logger.success(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${setting}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${guild.name} (${guildId}) ‚Üí ${value}`);
        } catch (error) {
            Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ config ${setting} –Ω–∞ ${guildId}:`, error);
            await interaction.editReply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.');
        }
    },

    async endpoll(interaction) {
        await interaction.deferReply({ ephemeral: true });
        const result = await pollManager.endPoll(interaction.guildId, true);
        await interaction.editReply('‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω –≤—Ä—É—á–Ω—É—é.');
    },

    async config(interaction) {
        await interaction.deferReply({ ephemeral: true });

        const guildId = interaction.guildId;
        const config = SettingsManager.getConfig(guildId);
        const guild = interaction.guild;

        if (!config) {
            await interaction.editReply('‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞.');
            return;
        }

        const resolveName = (type, id) => {
            if (!id) return '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ';
            try {
                const item = type === 'channel'
                    ? guild.channels.cache.get(id)
                    : guild.roles.cache.get(id);
                return item ? `${item.name} (\`${id}\`)` : `‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ (ID: \`${id}\`)`;
            } catch {
                return `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ ID: \`${id}\``;
            }
        };

        const { channelId, leaderRoleId, voterRoleId, curatorRoleId, enabled } = config;

        const embed = {
            color: 0x5865F2,
            title: `‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è "${guild.name}"`,
            fields: [
                { name: 'üì¢ –ö–∞–Ω–∞–ª –æ–ø—Ä–æ—Å–æ–≤', value: resolveName('channel', channelId), inline: false },
                { name: 'üëë –†–æ–ª—å –ª–∏–¥–µ—Ä–∞', value: resolveName('role', leaderRoleId), inline: false },
                { name: 'üîî –†–æ–ª—å –ø–∏–Ω–≥–∞', value: resolveName('role', voterRoleId), inline: false },
                { name: 'üßë‚Äçüíº –†–æ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–æ–≤', value: resolveName('role', curatorRoleId), inline: false },
                { name: 'üîÑ –ê–≤—Ç–æ–æ–ø—Ä–æ—Å—ã', value: enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω—ã' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã', inline: false }
            ],
            footer: { text: `ID —Å–µ—Ä–≤–µ—Ä–∞: ${guildId}` },
            timestamp: new Date()
        };

        await interaction.editReply({ embeds: [embed] });
    },

    async toggle(interaction) {
        await interaction.deferReply({ ephemeral: true });
        const guildId = interaction.guildId;
        const config = SettingsManager.getConfig(guildId);
        if (!config) {
            await interaction.editReply('‚ùå –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
            return;
        }
        const newState = !config.enabled;
        SettingsManager.updateConfig(guildId, { enabled: newState });
        await interaction.editReply(`üîÑ –ê–≤—Ç–æ–æ–ø—Ä–æ—Å—ã —Ç–µ–ø–µ—Ä—å ${newState ? '–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚ùå'}.`);
    },

    async pollstatus(interaction) {
        await interaction.deferReply({ ephemeral: true });

        const states = pollManager.getPollStates();
        const configs = SettingsManager.getAllConfigs();

        const fields = [];
        let closestEndTime = null;

        for (const [guildId, config] of Object.entries(configs)) {
            const name = `> ${config.name}`;
            const state = states[guildId];
            const active = state && !state.ended;
            const yes = active ? state.votes.yes.size : 0;
            const no = active ? state.votes.no.size : 0;

            if (active) {
                const stateEnd = pollManager.constructor.getNextTuesdayEnd();
                if (!closestEndTime || stateEnd < closestEndTime) {
                    closestEndTime = stateEnd;
                }
            }

            const value = active
                ? `> ${config.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n> \n>  ${yes} | ${no}`
                : `> ${config.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n> \n>  üò¥`;

            fields.push({ name, value, inline: true });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º ‚åö —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫
        let timeValue = '';

        if (closestEndTime) {
            const now = new Date();
            const remainingMs = closestEndTime - now;
            const hours = Math.floor(remainingMs / (1000 * 60 * 60));
            const minutes = Math.floor((remainingMs / (1000 * 60)) % 60);
            timeValue = `–û–ø—Ä–æ—Å –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ${hours} —á ${minutes} –º–∏–Ω`;
        } else {
            timeValue = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤';
            const nextPoll = scheduleManager.getNextGlobalPollTime();
            if (nextPoll) {
                const now = new Date();
                const diff = nextPoll - now;
                const hours = Math.floor(diff / (1000 * 60 * 60));
                const minutes = Math.floor((diff / (1000 * 60)) % 60);

                const exactTime = nextPoll.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow', weekday: 'short', hour: '2-digit', minute: '2-digit', day: 'numeric', month: 'long' });
                timeValue += ` | –°–ª–µ–¥—É—é—â–∏–π –æ–ø—Ä–æ—Å: ${hours > 24 ? exactTime : `${hours} —á ${minutes} –º–∏–Ω`}`;
            }
        }

        fields.push({
            name: '‚åö',
            value: timeValue
        });

        const embed = new EmbedBuilder()
            .setTitle('üìä –°—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º')
            .setColor(0x2B6CB0)
            .addFields(fields)
            .setTimestamp();

        await interaction.editReply({ embeds: [embed] });
    },

    async clearcommands(interaction) {
        await commandManager.clearAllCommands(interaction);
    }
});
