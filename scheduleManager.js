const cron = require('node-cron');
const Logger = require('./logger');
const SettingsManager = require('./settingsManager');

let cronJob = null;
let customStart = null;
let customEnd = null;
let globalStartCron = null;
let globalEndCron = null;

class ScheduleManager {
    constructor(pollManager) {
        this.pollManager = pollManager;
    }

    setGlobalAutoTime(start, end) {
        globalStartCron = start;
        globalEndCron = end;
    }

    getNextGlobalPollTime() {
        if (!globalStartCron) return null;
        const [min, hour, , , day] = globalStartCron.split(' ').map(Number);
        const now = new Date();
        const target = new Date(now);
        const moscowNow = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));

        let diff = (day - moscowNow.getDay() + 7) % 7;
        if (diff === 0 && (moscowNow.getHours() > hour || (moscowNow.getHours() === hour && moscowNow.getMinutes() >= min))) {
            diff = 7;
        }

        target.setDate(moscowNow.getDate() + diff);
        target.setHours(hour, min, 0, 0);
        return target;
    }

    getCurrentGlobalEndTime() {
        if (!globalEndCron) return null;
        const [min, hour, , , day] = globalEndCron.split(' ').map(Number);
        const now = new Date();
        const target = new Date(now);
        const moscowNow = new Date(now.toLocaleString('en-US', { timeZone: 'Europe/Moscow' }));

        let diff = (day - moscowNow.getDay() + 7) % 7;
        if (diff === 0 && (moscowNow.getHours() > hour || (moscowNow.getHours() === hour && moscowNow.getMinutes() >= min))) {
            diff = 7;
        }

        target.setDate(moscowNow.getDate() + diff);
        target.setHours(hour, min, 0, 0);
        return target;
    }
    start() {
        if (cronJob) {
            cronJob.stop();
            Logger.info('–°—Ç–∞—Ä—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        }

        cronJob = cron.schedule('5 0 * * 1', async () => {
            Logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...');

            const configs = SettingsManager.getAllConfigs();
            const guildsToPoll = Object.keys(configs).filter(id => configs[id].enabled);

            if (guildsToPoll.length === 0) {
                Logger.info('–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –æ–ø—Ä–æ—Å–∞–º–∏.');
                return;
            }

            for (const guildId of guildsToPoll) {
                try {
                    const result = await this.pollManager.startPoll(guildId, false);

                    Logger.info(`‚Üí ${guildId}: ${result.message}`);

                    if (result.success) {
                        this.pollManager.scheduleEndPoll(guildId);
                    }
                } catch (err) {
                    Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞ –Ω–∞ ${guildId}:`, err);
                }

                await new Promise(res => setTimeout(res, 3000));
            }
        }, {
            timezone: 'Europe/Moscow',
            scheduled: true
        });

        Logger.success('üìÜ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 00:05 –ú–°–ö).');
    }

    stop() {
        if (cronJob) {
            cronJob.stop();
            cronJob = null;
            Logger.info('‚õî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
        }
    }
    setCustomSchedule(startCron, endCron) {
        if (cronJob) cronJob.stop();

        customStart = startCron;
        customEnd = endCron;

        cronJob = cron.schedule(startCron, async () => {
        Logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...');
        const configs = SettingsManager.getAllConfigs();
        const guildsToPoll = Object.keys(configs).filter(id => configs[id].enabled);
        for (const guildId of guildsToPoll) {
            const result = await this.pollManager.startPoll(guildId, false);
            Logger.info(`‚Üí ${guildId}: ${result.message}`);
            if (result.success) {
            this.pollManager.scheduleEndPoll(guildId, false, null, customEnd);
            }
            await new Promise(res => setTimeout(res, 3000));
        }
        }, {
        timezone: 'Europe/Moscow',
        scheduled: true
        });

        Logger.success(`üìÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: start="${startCron}", end="${endCron}"`);
    }
    startDailyGuildCheck(client) {
        cron.schedule('0 4 * * *', async () => {
            Logger.info('üîç –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ whitelist...');

            const guilds = client.guilds.cache;
            let total = guilds.size;
            let allowed = 0;
            let left = 0;

            for (const guild of guilds.values()) {
                if (!ALLOWED_GUILD_IDS.includes(guild.id)) {
                    Logger.warn(`‚ö†Ô∏è üõë ${guild.name} (${guild.id}) ‚Äî –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö. –ü–æ–∫–∏–¥–∞–µ–º...`);
                    try {
                        await guild.leave();
                        left++;
                    } catch (err) {
                        Logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å ${guild.name} (${guild.id})`, err);
                    }
                } else {
                    allowed++;
                }
            }

            Logger.info(`üìä –°–µ—Ä–≤–µ—Ä–æ–≤ –≤—Å–µ–≥–æ: ${total}, –æ—Å—Ç–∞–ª–æ—Å—å: ${allowed}, –ø–æ–∫–∏–Ω—É–ª: ${left}`);
        }, {
            timezone: 'Europe/Moscow',
            scheduled: true
        });

        Logger.success('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤ 04:00 –ú–°–ö).');
    }
}

module.exports = ScheduleManager;
